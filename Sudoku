from state import State
import numpy as np
import random
import copy

#board = 9X9 array
#row, referred to as m
#column, referred to as n
#box, referred to as a 3X3
#square, referred to as board[m][n]

#This first class checks that the state of the board is valid & creates the set of possible values for any one square


class State:
    def __init__(self, board, possible_values = None):
        self.board = board
        self.rows = np.shape(board)[0]
        self.columns = np.shape(board)[1]
        if possible_values is None:
            self.possible_values = [[[i for i in range(0, 10)] for _ in range(0,9)]for _ in range(0, 9)]
        else:
            self.possible_values = possible_values

    def is_valid(self):
        for i in range(self.rows):
            for j in range(self.columns):
                return self.row_valid(i) and self.column_valid(j) and self.box_valid(i,j)

    def row_valid(self, index):
        list = []
        for i in range(self.rows):
            list.append(self.board[i][index])
        return self.has_duplicates(list)

    def column_valid(self, index):
        list = []
        for i in range(self.columns):
            list.append(self.board[index][i])
        return self.has_duplicates(list)

    def box_valid(self, row, col):
        list = []
        (m, n) = self.convert_box(row,col)
        for i in range(m, m+2):
            for j in range(n, n+2):
                 list.append(self.board[i][j])

        return self.has_duplicates(list)

    def __str__(self):
        s = ""
        for i in range(self.rows):
            for j in range(self.columns):
                #if i == 3 or i == 6:
                    #s = s + "|"
                s = s + " [" + str(self.board[i][j]) + "]"
            s = s + "\n"
        return s

    def has_duplicates(self, list):
        # list is an array w/ 9 numbers
        dictionary = {}
        for i in list:
            if i != 0:
                if i not in dictionary:
                    dictionary[i] = 1
                else:
                    dictionary[i] = dictionary[i] + 1
                if dictionary[i] > 1:
                    return False
        return True

    def convert_box(self, row, col):
        if row < 3:
            n = 0
        elif 3 < row and row < 6:
            n = 3
        elif 6 < row and row < 9:
            n = 6
        if col < 3:
            m = 0
        elif 3 < row and row <6:
            m = 3
        elif 6 < col and col < 9:
            m = 6
        return (m, n)

    def copy(self):
        return State(self.board)
        #check that this is passing as a new board
        #otherwise create a new array & then repass

    #new code below

    def get_possible_values(self, board):
        for row in range(self.rows):
            for column in range(self.columns):
                if self.board[row][column] != 0:
                    self.possible_values[row][column] = 0
                if self.board[row][column] == 0:
                    board.remove_duplicates(row, column)
        return self.possible_values

    def remove_duplicates(self, row, column):
        for i in range(self.rows):
            if self.board[row][i] in self.possible_values[row][column]:
                self.possible_values[row][column].remove(self.board[row][i])
        for i in range(self.rows):
            if self.board[i][column] in self.possible_values[row][column]:
                self.possible_values[row][column].remove(self.board[i][column])
        #(m,n) = self.convert_box(row, column)
        #for i in range(m, m +2):
            #for j in range(n, n+2):
                #if self.board[i][j] in self.possible_values[row][column]:
                    #self.possible_values[row][column].remove(self.board[i][j])

        return self.possible_values[row][column]

    def is_goal(self):
        array = np.array(self.board)
        return np.all((array != 0))

    def get_final_state(self):
        if self.is_goal():
            return self.board
        else:
            return -1

from state import State
# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print('PyCharm')
    
#amended this so that we always pick the square with the lowest number of possible values (greedy search?)
def pick_next_square(partial_state):
    square_indices = [(ix,iy) for ix, row in enumerate(partial_state.possible_values) for iy, value in enumerate(row) if partial_state.board[ix][iy] == 0]
    print(f"The square indices are {square_indices}")
    possible_value_len = 9
    square_to_start_with = square_indices[0]
    for (ix,iy) in square_indices:
        if len(partial_state.possible_values[ix][iy]) < possible_value_len:
            square_to_start_with = (ix,iy)
    return square_to_start_with
     

test_sudoku = [[1,0,4,3,8,2,9,5,6], [2, 0, 5, 4, 6, 7, 1, 3, 8],[3, 8, 6, 9, 5, 1, 4, 0, 2],[4, 6, 1, 5, 2, 3, 8, 9, 7],[7, 3, 8, 1, 4, 9, 6, 2, 5],[9, 5, 2, 8, 7, 6, 3, 1, 4],[5, 2, 9, 6, 3, 4, 7, 8, 1],[6, 0, 7, 2, 9, 8, 5, 4, 3],[8, 4,3,0,1,5,2,6,9]]
board = State(test_sudoku)
print(board.row_valid(1))
print(str(board))


test_sudoku = [[1,0,4,3,8,2,9,5,6], [2, 0, 5, 4, 6, 7, 1, 3, 8],[3, 8, 6, 9, 5, 1, 4, 0, 2],[4, 6, 1, 5, 2, 3, 8, 9, 7],[7, 3, 8, 1, 4, 9, 6, 2, 5],[9, 5, 2, 8, 7, 6, 3, 1, 4],[5, 2, 9, 6, 3, 4, 7, 8, 1],[6, 0, 7, 2, 9, 8, 5, 4, 3],[8, 4,3,0,1,5,2,6,9]]
board = State(test_sudoku)
print(board.row_valid(1))
print(str(board))

#update the possible values
board.get_possible_values(board)

#check values are called correctly from board & that possible values are correct
print(f" The current value on the board at (1,1) is {board.board[1][1]} and the possible values at (1,1) are {board.possible_values[1][1]}")
print(f" The first square we will explore is {pick_next_square(board)}")

